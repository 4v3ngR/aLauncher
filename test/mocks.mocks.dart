// Mocks generated by Mockito 5.2.0 from annotations
// in flauncher/test/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:typed_data' as _i18;
import 'dart:ui' as _i13;

import 'package:drift/drift.dart' as _i6;
import 'package:drift/src/runtime/executor/stream_queries.dart' as _i8;
import 'package:firebase_analytics/firebase_analytics.dart' as _i17;
import 'package:firebase_core/firebase_core.dart' as _i3;
import 'package:firebase_crashlytics/firebase_crashlytics.dart' as _i15;
import 'package:firebase_remote_config/firebase_remote_config.dart' as _i4;
import 'package:flauncher/database.dart' as _i7;
import 'package:flauncher/flauncher_channel.dart' as _i9;
import 'package:flauncher/gradients.dart' as _i2;
import 'package:flauncher/providers/apps_service.dart' as _i14;
import 'package:flauncher/providers/settings_service.dart' as _i12;
import 'package:flauncher/providers/wallpaper_service.dart' as _i11;
import 'package:flauncher/unsplash_service.dart' as _i5;
import 'package:flutter/foundation.dart' as _i16;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFLauncherGradient_0 extends _i1.Fake implements _i2.FLauncherGradient {}

class _FakeFirebaseApp_1 extends _i1.Fake implements _i3.FirebaseApp {}

class _FakeDateTime_2 extends _i1.Fake implements DateTime {}

class _FakeRemoteConfigSettings_3 extends _i1.Fake implements _i4.RemoteConfigSettings {}

class _FakeRemoteConfigValue_4 extends _i1.Fake implements _i4.RemoteConfigValue {}

class _FakePhoto_5 extends _i1.Fake implements _i5.Photo {}

class _FakeMigrationStrategy_6 extends _i1.Fake implements _i6.MigrationStrategy {}

class _Fake$AppsTable_7 extends _i1.Fake implements _i7.$AppsTable {}

class _Fake$CategoriesTable_8 extends _i1.Fake implements _i7.$CategoriesTable {}

class _Fake$AppsCategoriesTable_9 extends _i1.Fake implements _i7.$AppsCategoriesTable {}

class _FakeGeneratedDatabase_10 extends _i1.Fake implements _i6.GeneratedDatabase {}

class _FakeStreamQueryUpdateRules_11 extends _i1.Fake implements _i6.StreamQueryUpdateRules {}

class _FakeDatabaseConnection_12 extends _i1.Fake implements _i6.DatabaseConnection {}

class _FakeSqlTypeSystem_13 extends _i1.Fake implements _i6.SqlTypeSystem {}

class _FakeQueryExecutor_14 extends _i1.Fake implements _i6.QueryExecutor {}

class _FakeStreamQueryStore_15 extends _i1.Fake implements _i8.StreamQueryStore {}

class _FakeDatabaseConnectionUser_16 extends _i1.Fake implements _i6.DatabaseConnectionUser {}

class _FakeMigrator_17 extends _i1.Fake implements _i6.Migrator {}

class _FakeTableOrViewOperations_18<Tbl extends _i6.HasResultSet, Row> extends _i1.Fake
    implements _i6.TableOrViewOperations<Tbl, Row> {}

class _FakeInsertStatement_19<T extends _i6.Table, D> extends _i1.Fake implements _i6.InsertStatement<T, D> {}

class _FakeUpdateStatement_20<T extends _i6.Table, D> extends _i1.Fake implements _i6.UpdateStatement<T, D> {}

class _FakeSimpleSelectStatement_21<T extends _i6.HasResultSet, D> extends _i1.Fake
    implements _i6.SimpleSelectStatement<T, D> {}

class _FakeJoinedSelectStatement_22<FirstT extends _i6.HasResultSet, FirstD> extends _i1.Fake
    implements _i6.JoinedSelectStatement<FirstT, FirstD> {}

class _FakeDeleteStatement_23<T extends _i6.Table, D> extends _i1.Fake implements _i6.DeleteStatement<T, D> {}

class _FakeSelectable_24<T> extends _i1.Fake implements _i6.Selectable<T> {}

class _FakeGenerationContext_25 extends _i1.Fake implements _i6.GenerationContext {}

/// A class which mocks [FLauncherChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockFLauncherChannel extends _i1.Mock implements _i9.FLauncherChannel {
  MockFLauncherChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<List<dynamic>> getApplications() => (super.noSuchMethod(Invocation.method(#getApplications, []),
      returnValue: Future<List<dynamic>>.value(<dynamic>[])) as _i10.Future<List<dynamic>>);
  @override
  _i10.Future<bool> applicationExists(String? packageName) =>
      (super.noSuchMethod(Invocation.method(#applicationExists, [packageName]), returnValue: Future<bool>.value(false))
          as _i10.Future<bool>);
  @override
  _i10.Future<void> launchApp(String? packageName) => (super.noSuchMethod(Invocation.method(#launchApp, [packageName]),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> openSettings() => (super.noSuchMethod(Invocation.method(#openSettings, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> openAppInfo(String? packageName) =>
      (super.noSuchMethod(Invocation.method(#openAppInfo, [packageName]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> uninstallApp(String? packageName) =>
      (super.noSuchMethod(Invocation.method(#uninstallApp, [packageName]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<bool> isDefaultLauncher() =>
      (super.noSuchMethod(Invocation.method(#isDefaultLauncher, []), returnValue: Future<bool>.value(false))
          as _i10.Future<bool>);
  @override
  _i10.Future<bool> checkForGetContentAvailability() => (super
          .noSuchMethod(Invocation.method(#checkForGetContentAvailability, []), returnValue: Future<bool>.value(false))
      as _i10.Future<bool>);
  @override
  _i10.Future<void> startAmbientMode() => (super.noSuchMethod(Invocation.method(#startAmbientMode, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void addAppsChangedListener(void Function(Map<dynamic, dynamic>)? listener) =>
      super.noSuchMethod(Invocation.method(#addAppsChangedListener, [listener]), returnValueForMissingStub: null);
}

/// A class which mocks [WallpaperService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWallpaperService extends _i1.Mock implements _i11.WallpaperService {
  MockWallpaperService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FLauncherGradient get gradient =>
      (super.noSuchMethod(Invocation.getter(#gradient), returnValue: _FakeFLauncherGradient_0())
          as _i2.FLauncherGradient);
  @override
  set settingsService(_i12.SettingsService? settingsService) =>
      super.noSuchMethod(Invocation.setter(#settingsService, settingsService), returnValueForMissingStub: null);
  @override
  bool get hasListeners => (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false) as bool);
  @override
  _i10.Future<void> pickWallpaper() => (super.noSuchMethod(Invocation.method(#pickWallpaper, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> randomFromUnsplash(String? query) =>
      (super.noSuchMethod(Invocation.method(#randomFromUnsplash, [query]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<List<_i5.Photo>> searchFromUnsplash(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchFromUnsplash, [query]),
          returnValue: Future<List<_i5.Photo>>.value(<_i5.Photo>[])) as _i10.Future<List<_i5.Photo>>);
  @override
  _i10.Future<void> setFromUnsplash(_i5.Photo? photo) =>
      (super.noSuchMethod(Invocation.method(#setFromUnsplash, [photo]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setGradient(_i2.FLauncherGradient? fLauncherGradient) =>
      (super.noSuchMethod(Invocation.method(#setGradient, [fLauncherGradient]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]), returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]), returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []), returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []), returnValueForMissingStub: null);
}

/// A class which mocks [AppsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppsService extends _i1.Mock implements _i14.AppsService {
  MockAppsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get initialized => (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false) as bool);
  @override
  List<_i7.App> get applications =>
      (super.noSuchMethod(Invocation.getter(#applications), returnValue: <_i7.App>[]) as List<_i7.App>);
  @override
  List<_i7.CategoryWithApps> get categoriesWithApps =>
      (super.noSuchMethod(Invocation.getter(#categoriesWithApps), returnValue: <_i7.CategoryWithApps>[])
          as List<_i7.CategoryWithApps>);
  @override
  bool get hasListeners => (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false) as bool);
  @override
  _i10.Future<void> launchApp(_i7.App? app) => (super.noSuchMethod(Invocation.method(#launchApp, [app]),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> openAppInfo(_i7.App? app) => (super.noSuchMethod(Invocation.method(#openAppInfo, [app]),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> uninstallApp(_i7.App? app) => (super.noSuchMethod(Invocation.method(#uninstallApp, [app]),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> openSettings() => (super.noSuchMethod(Invocation.method(#openSettings, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<bool> isDefaultLauncher() =>
      (super.noSuchMethod(Invocation.method(#isDefaultLauncher, []), returnValue: Future<bool>.value(false))
          as _i10.Future<bool>);
  @override
  _i10.Future<void> startAmbientMode() => (super.noSuchMethod(Invocation.method(#startAmbientMode, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> addToCategory(_i7.App? app, _i7.Category? category, {bool? shouldNotifyListeners = true}) => (super
      .noSuchMethod(Invocation.method(#addToCategory, [app, category], {#shouldNotifyListeners: shouldNotifyListeners}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> removeFromCategory(_i7.App? app, _i7.Category? category) =>
      (super.noSuchMethod(Invocation.method(#removeFromCategory, [app, category]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> saveOrderInCategory(_i7.Category? category) =>
      (super.noSuchMethod(Invocation.method(#saveOrderInCategory, [category]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void reorderApplication(_i7.Category? category, int? oldIndex, int? newIndex) =>
      super.noSuchMethod(Invocation.method(#reorderApplication, [category, oldIndex, newIndex]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> addCategory(String? categoryName, {bool? shouldNotifyListeners = true}) => (super.noSuchMethod(
      Invocation.method(#addCategory, [categoryName], {#shouldNotifyListeners: shouldNotifyListeners}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> renameCategory(_i7.Category? category, String? categoryName) =>
      (super.noSuchMethod(Invocation.method(#renameCategory, [category, categoryName]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> deleteCategory(_i7.Category? category) =>
      (super.noSuchMethod(Invocation.method(#deleteCategory, [category]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> moveCategory(int? oldIndex, int? newIndex) =>
      (super.noSuchMethod(Invocation.method(#moveCategory, [oldIndex, newIndex]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> hideApplication(_i7.App? application) =>
      (super.noSuchMethod(Invocation.method(#hideApplication, [application]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> unHideApplication(_i7.App? application) =>
      (super.noSuchMethod(Invocation.method(#unHideApplication, [application]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setCategoryType(_i7.Category? category, _i7.CategoryType? type,
          {bool? shouldNotifyListeners = true}) =>
      (super.noSuchMethod(
          Invocation.method(#setCategoryType, [category, type], {#shouldNotifyListeners: shouldNotifyListeners}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setCategorySort(_i7.Category? category, _i7.CategorySort? sort) =>
      (super.noSuchMethod(Invocation.method(#setCategorySort, [category, sort]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setCategoryColumnsCount(_i7.Category? category, int? columnsCount) =>
      (super.noSuchMethod(Invocation.method(#setCategoryColumnsCount, [category, columnsCount]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setCategoryRowHeight(_i7.Category? category, int? rowHeight) =>
      (super.noSuchMethod(Invocation.method(#setCategoryRowHeight, [category, rowHeight]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]), returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]), returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []), returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []), returnValueForMissingStub: null);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i12.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get crashReportsEnabled =>
      (super.noSuchMethod(Invocation.getter(#crashReportsEnabled), returnValue: false) as bool);
  @override
  bool get analyticsEnabled => (super.noSuchMethod(Invocation.getter(#analyticsEnabled), returnValue: false) as bool);
  @override
  bool get use24HourTimeFormat =>
      (super.noSuchMethod(Invocation.getter(#use24HourTimeFormat), returnValue: false) as bool);
  @override
  bool get unsplashEnabled => (super.noSuchMethod(Invocation.getter(#unsplashEnabled), returnValue: false) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false) as bool);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []), returnValueForMissingStub: null);
  @override
  _i10.Future<void> setCrashReportsEnabled(bool? value) =>
      (super.noSuchMethod(Invocation.method(#setCrashReportsEnabled, [value]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setAnalyticsEnabled(bool? value) =>
      (super.noSuchMethod(Invocation.method(#setAnalyticsEnabled, [value]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setUse24HourTimeFormat(bool? value) =>
      (super.noSuchMethod(Invocation.method(#setUse24HourTimeFormat, [value]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setGradientUuid(String? value) => (super.noSuchMethod(Invocation.method(#setGradientUuid, [value]),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setUnsplashAuthor(String? value) =>
      (super.noSuchMethod(Invocation.method(#setUnsplashAuthor, [value]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]), returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]), returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []), returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseCrashlytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseCrashlytics extends _i1.Mock implements _i15.FirebaseCrashlytics {
  MockFirebaseCrashlytics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app =>
      (super.noSuchMethod(Invocation.getter(#app), returnValue: _FakeFirebaseApp_1()) as _i3.FirebaseApp);
  @override
  set app(_i3.FirebaseApp? _app) => super.noSuchMethod(Invocation.setter(#app, _app), returnValueForMissingStub: null);
  @override
  bool get isCrashlyticsCollectionEnabled =>
      (super.noSuchMethod(Invocation.getter(#isCrashlyticsCollectionEnabled), returnValue: false) as bool);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants), returnValue: <dynamic, dynamic>{})
          as Map<dynamic, dynamic>);
  @override
  _i10.Future<bool> checkForUnsentReports() =>
      (super.noSuchMethod(Invocation.method(#checkForUnsentReports, []), returnValue: Future<bool>.value(false))
          as _i10.Future<bool>);
  @override
  void crash() => super.noSuchMethod(Invocation.method(#crash, []), returnValueForMissingStub: null);
  @override
  _i10.Future<void> deleteUnsentReports() => (super.noSuchMethod(Invocation.method(#deleteUnsentReports, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<bool> didCrashOnPreviousExecution() =>
      (super.noSuchMethod(Invocation.method(#didCrashOnPreviousExecution, []), returnValue: Future<bool>.value(false))
          as _i10.Future<bool>);
  @override
  _i10.Future<void> recordError(dynamic exception, StackTrace? stack,
          {dynamic reason,
          Iterable<_i16.DiagnosticsNode>? information = const [],
          bool? printDetails,
          bool? fatal = false}) =>
      (super.noSuchMethod(
          Invocation.method(#recordError, [exception, stack],
              {#reason: reason, #information: information, #printDetails: printDetails, #fatal: fatal}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> recordFlutterError(_i16.FlutterErrorDetails? flutterErrorDetails, {bool? fatal = false}) =>
      (super.noSuchMethod(Invocation.method(#recordFlutterError, [flutterErrorDetails], {#fatal: fatal}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> recordFlutterFatalError(_i16.FlutterErrorDetails? flutterErrorDetails) =>
      (super.noSuchMethod(Invocation.method(#recordFlutterFatalError, [flutterErrorDetails]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> log(String? message) => (super.noSuchMethod(Invocation.method(#log, [message]),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> sendUnsentReports() => (super.noSuchMethod(Invocation.method(#sendUnsentReports, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setCrashlyticsCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(Invocation.method(#setCrashlyticsCollectionEnabled, [enabled]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setUserIdentifier(String? identifier) =>
      (super.noSuchMethod(Invocation.method(#setUserIdentifier, [identifier]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setCustomKey(String? key, Object? value) =>
      (super.noSuchMethod(Invocation.method(#setCustomKey, [key, value]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
}

/// A class which mocks [FirebaseAnalytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAnalytics extends _i1.Mock implements _i17.FirebaseAnalytics {
  MockFirebaseAnalytics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app =>
      (super.noSuchMethod(Invocation.getter(#app), returnValue: _FakeFirebaseApp_1()) as _i3.FirebaseApp);
  @override
  set app(_i3.FirebaseApp? _app) => super.noSuchMethod(Invocation.setter(#app, _app), returnValueForMissingStub: null);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants), returnValue: <dynamic, dynamic>{})
          as Map<dynamic, dynamic>);
  @override
  _i10.Future<void> logEvent(
          {String? name, Map<String, Object?>? parameters, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logEvent, [], {#name: name, #parameters: parameters, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setConsent({bool? adStorageConsentGranted, bool? analyticsStorageConsentGranted}) =>
      (super.noSuchMethod(
          Invocation.method(#setConsent, [], {
            #adStorageConsentGranted: adStorageConsentGranted,
            #analyticsStorageConsentGranted: analyticsStorageConsentGranted
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setDefaultEventParameters(Map<String, Object>? defaultParameters) =>
      (super.noSuchMethod(Invocation.method(#setDefaultEventParameters, [defaultParameters]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setAnalyticsCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(Invocation.method(#setAnalyticsCollectionEnabled, [enabled]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setUserId({String? id, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(Invocation.method(#setUserId, [], {#id: id, #callOptions: callOptions}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setCurrentScreen(
          {String? screenName, String? screenClassOverride = r'Flutter', _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#setCurrentScreen, [],
              {#screenName: screenName, #screenClassOverride: screenClassOverride, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setUserProperty({String? name, String? value, _i17.AnalyticsCallOptions? callOptions}) => (super
      .noSuchMethod(Invocation.method(#setUserProperty, [], {#name: name, #value: value, #callOptions: callOptions}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> resetAnalyticsData() => (super.noSuchMethod(Invocation.method(#resetAnalyticsData, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logAddPaymentInfo(
          {String? coupon,
          String? currency,
          String? paymentType,
          double? value,
          List<_i17.AnalyticsEventItem>? items,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAddPaymentInfo, [], {
            #coupon: coupon,
            #currency: currency,
            #paymentType: paymentType,
            #value: value,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logAddShippingInfo(
          {String? coupon,
          String? currency,
          double? value,
          String? shippingTier,
          List<_i17.AnalyticsEventItem>? items,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAddShippingInfo, [], {
            #coupon: coupon,
            #currency: currency,
            #value: value,
            #shippingTier: shippingTier,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logAddToCart(
          {List<_i17.AnalyticsEventItem>? items,
          double? value,
          String? currency,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(
              #logAddToCart, [], {#items: items, #value: value, #currency: currency, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logAddToWishlist(
          {List<_i17.AnalyticsEventItem>? items,
          double? value,
          String? currency,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(
              #logAddToWishlist, [], {#items: items, #value: value, #currency: currency, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logEcommercePurchase(
          {String? currency,
          double? value,
          String? transactionId,
          double? tax,
          double? shipping,
          String? coupon,
          String? location,
          int? numberOfNights,
          int? numberOfRooms,
          int? numberOfPassengers,
          String? origin,
          String? destination,
          String? startDate,
          String? endDate,
          String? travelClass}) =>
      (super.noSuchMethod(
          Invocation.method(#logEcommercePurchase, [], {
            #currency: currency,
            #value: value,
            #transactionId: transactionId,
            #tax: tax,
            #shipping: shipping,
            #coupon: coupon,
            #location: location,
            #numberOfNights: numberOfNights,
            #numberOfRooms: numberOfRooms,
            #numberOfPassengers: numberOfPassengers,
            #origin: origin,
            #destination: destination,
            #startDate: startDate,
            #endDate: endDate,
            #travelClass: travelClass
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logAdImpression(
          {String? adPlatform,
          String? adSource,
          String? adFormat,
          String? adUnitName,
          double? value,
          String? currency,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAdImpression, [], {
            #adPlatform: adPlatform,
            #adSource: adSource,
            #adFormat: adFormat,
            #adUnitName: adUnitName,
            #value: value,
            #currency: currency,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logAppOpen({_i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(Invocation.method(#logAppOpen, [], {#callOptions: callOptions}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logBeginCheckout(
          {double? value,
          String? currency,
          List<_i17.AnalyticsEventItem>? items,
          String? coupon,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logBeginCheckout, [],
              {#value: value, #currency: currency, #items: items, #coupon: coupon, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logCampaignDetails(
          {String? source,
          String? medium,
          String? campaign,
          String? term,
          String? content,
          String? aclid,
          String? cp1,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logCampaignDetails, [], {
            #source: source,
            #medium: medium,
            #campaign: campaign,
            #term: term,
            #content: content,
            #aclid: aclid,
            #cp1: cp1,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logEarnVirtualCurrency(
          {String? virtualCurrencyName, num? value, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logEarnVirtualCurrency, [],
              {#virtualCurrencyName: virtualCurrencyName, #value: value, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logPresentOffer(
          {String? itemId,
          String? itemName,
          String? itemCategory,
          int? quantity,
          double? price,
          double? value,
          String? currency,
          String? itemLocationId}) =>
      (super.noSuchMethod(
          Invocation.method(#logPresentOffer, [], {
            #itemId: itemId,
            #itemName: itemName,
            #itemCategory: itemCategory,
            #quantity: quantity,
            #price: price,
            #value: value,
            #currency: currency,
            #itemLocationId: itemLocationId
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logPurchaseRefund({String? currency, double? value, String? transactionId}) => (super.noSuchMethod(
      Invocation.method(#logPurchaseRefund, [], {#currency: currency, #value: value, #transactionId: transactionId}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logGenerateLead({String? currency, double? value, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logGenerateLead, [], {#currency: currency, #value: value, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logJoinGroup({String? groupId, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(Invocation.method(#logJoinGroup, [], {#groupId: groupId, #callOptions: callOptions}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logLevelUp({int? level, String? character, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logLevelUp, [], {#level: level, #character: character, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logLevelStart({String? levelName, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(Invocation.method(#logLevelStart, [], {#levelName: levelName, #callOptions: callOptions}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logLevelEnd({String? levelName, int? success, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logLevelEnd, [], {#levelName: levelName, #success: success, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logSetCheckoutOption({int? checkoutStep, String? checkoutOption}) => (super.noSuchMethod(
      Invocation.method(#logSetCheckoutOption, [], {#checkoutStep: checkoutStep, #checkoutOption: checkoutOption}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logLogin({String? loginMethod, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(Invocation.method(#logLogin, [], {#loginMethod: loginMethod, #callOptions: callOptions}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logPostScore({int? score, int? level, String? character, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(
              #logPostScore, [], {#score: score, #level: level, #character: character, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logPurchase(
          {String? currency,
          String? coupon,
          double? value,
          List<_i17.AnalyticsEventItem>? items,
          double? tax,
          double? shipping,
          String? transactionId,
          String? affiliation,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logPurchase, [], {
            #currency: currency,
            #coupon: coupon,
            #value: value,
            #items: items,
            #tax: tax,
            #shipping: shipping,
            #transactionId: transactionId,
            #affiliation: affiliation,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logRemoveFromCart(
          {String? currency,
          double? value,
          List<_i17.AnalyticsEventItem>? items,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(
              #logRemoveFromCart, [], {#currency: currency, #value: value, #items: items, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logScreenView({String? screenClass, String? screenName, _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(
              #logScreenView, [], {#screenClass: screenClass, #screenName: screenName, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logSelectItem(
          {String? itemListId,
          String? itemListName,
          List<_i17.AnalyticsEventItem>? items,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logSelectItem, [],
              {#itemListId: itemListId, #itemListName: itemListName, #items: items, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logSelectPromotion(
          {String? creativeName,
          String? creativeSlot,
          List<_i17.AnalyticsEventItem>? items,
          String? locationId,
          String? promotionId,
          String? promotionName,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logSelectPromotion, [], {
            #creativeName: creativeName,
            #creativeSlot: creativeSlot,
            #items: items,
            #locationId: locationId,
            #promotionId: promotionId,
            #promotionName: promotionName,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logViewCart(
          {String? currency,
          double? value,
          List<_i17.AnalyticsEventItem>? items,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(
              #logViewCart, [], {#currency: currency, #value: value, #items: items, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logSearch(
          {String? searchTerm,
          int? numberOfNights,
          int? numberOfRooms,
          int? numberOfPassengers,
          String? origin,
          String? destination,
          String? startDate,
          String? endDate,
          String? travelClass,
          _i17.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logSearch, [], {
            #searchTerm: searchTerm,
            #numberOfNights: numberOfNights,
            #numberOfRooms: numberOfRooms,
            #numberOfPassengers: numberOfPassengers,
            #origin: origin,
            #destination: destination,
            #startDate: startDate,
            #endDate: endDate,
            #travelClass: travelClass,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logSelectContent({String? contentType, String? itemId}) =>
      (super.noSuchMethod(Invocation.method(#logSelectContent, [], {#contentType: contentType, #itemId: itemId}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logShare({String? contentType, String? itemId, String? method}) => (super.noSuchMethod(
      Invocation.method(#logShare, [], {#contentType: contentType, #itemId: itemId, #method: method}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logSignUp({String? signUpMethod}) =>
      (super.noSuchMethod(Invocation.method(#logSignUp, [], {#signUpMethod: signUpMethod}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logSpendVirtualCurrency({String? itemName, String? virtualCurrencyName, num? value}) =>
      (super.noSuchMethod(
          Invocation.method(#logSpendVirtualCurrency, [],
              {#itemName: itemName, #virtualCurrencyName: virtualCurrencyName, #value: value}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logTutorialBegin() => (super.noSuchMethod(Invocation.method(#logTutorialBegin, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logTutorialComplete() => (super.noSuchMethod(Invocation.method(#logTutorialComplete, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logUnlockAchievement({String? id}) =>
      (super.noSuchMethod(Invocation.method(#logUnlockAchievement, [], {#id: id}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logViewItem({String? currency, double? value, List<_i17.AnalyticsEventItem>? items}) =>
      (super.noSuchMethod(Invocation.method(#logViewItem, [], {#currency: currency, #value: value, #items: items}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logViewItemList({List<_i17.AnalyticsEventItem>? items, String? itemListId, String? itemListName}) =>
      (super.noSuchMethod(
          Invocation.method(
              #logViewItemList, [], {#items: items, #itemListId: itemListId, #itemListName: itemListName}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logViewPromotion(
          {String? creativeName,
          String? creativeSlot,
          List<_i17.AnalyticsEventItem>? items,
          String? locationId,
          String? promotionId,
          String? promotionName}) =>
      (super.noSuchMethod(
          Invocation.method(#logViewPromotion, [], {
            #creativeName: creativeName,
            #creativeSlot: creativeSlot,
            #items: items,
            #locationId: locationId,
            #promotionId: promotionId,
            #promotionName: promotionName
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logViewSearchResults({String? searchTerm}) =>
      (super.noSuchMethod(Invocation.method(#logViewSearchResults, [], {#searchTerm: searchTerm}),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> logRefund(
          {String? currency,
          String? coupon,
          double? value,
          double? tax,
          double? shipping,
          String? transactionId,
          String? affiliation,
          List<_i17.AnalyticsEventItem>? items}) =>
      (super.noSuchMethod(
          Invocation.method(#logRefund, [], {
            #currency: currency,
            #coupon: coupon,
            #value: value,
            #tax: tax,
            #shipping: shipping,
            #transactionId: transactionId,
            #affiliation: affiliation,
            #items: items
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setSessionTimeoutDuration(Duration? timeout) =>
      (super.noSuchMethod(Invocation.method(#setSessionTimeoutDuration, [timeout]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
}

/// A class which mocks [FirebaseRemoteConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseRemoteConfig extends _i1.Mock implements _i4.FirebaseRemoteConfig {
  MockFirebaseRemoteConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app =>
      (super.noSuchMethod(Invocation.getter(#app), returnValue: _FakeFirebaseApp_1()) as _i3.FirebaseApp);
  @override
  DateTime get lastFetchTime =>
      (super.noSuchMethod(Invocation.getter(#lastFetchTime), returnValue: _FakeDateTime_2()) as DateTime);
  @override
  _i4.RemoteConfigFetchStatus get lastFetchStatus =>
      (super.noSuchMethod(Invocation.getter(#lastFetchStatus), returnValue: _i4.RemoteConfigFetchStatus.noFetchYet)
          as _i4.RemoteConfigFetchStatus);
  @override
  _i4.RemoteConfigSettings get settings =>
      (super.noSuchMethod(Invocation.getter(#settings), returnValue: _FakeRemoteConfigSettings_3())
          as _i4.RemoteConfigSettings);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants), returnValue: <dynamic, dynamic>{})
          as Map<dynamic, dynamic>);
  @override
  bool get hasListeners => (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false) as bool);
  @override
  _i10.Future<bool> activate() =>
      (super.noSuchMethod(Invocation.method(#activate, []), returnValue: Future<bool>.value(false))
          as _i10.Future<bool>);
  @override
  _i10.Future<void> ensureInitialized() => (super.noSuchMethod(Invocation.method(#ensureInitialized, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> fetch() => (super.noSuchMethod(Invocation.method(#fetch, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<bool> fetchAndActivate() =>
      (super.noSuchMethod(Invocation.method(#fetchAndActivate, []), returnValue: Future<bool>.value(false))
          as _i10.Future<bool>);
  @override
  Map<String, _i4.RemoteConfigValue> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []), returnValue: <String, _i4.RemoteConfigValue>{})
          as Map<String, _i4.RemoteConfigValue>);
  @override
  bool getBool(String? key) => (super.noSuchMethod(Invocation.method(#getBool, [key]), returnValue: false) as bool);
  @override
  int getInt(String? key) => (super.noSuchMethod(Invocation.method(#getInt, [key]), returnValue: 0) as int);
  @override
  double getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key]), returnValue: 0.0) as double);
  @override
  String getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key]), returnValue: '') as String);
  @override
  _i4.RemoteConfigValue getValue(String? key) =>
      (super.noSuchMethod(Invocation.method(#getValue, [key]), returnValue: _FakeRemoteConfigValue_4())
          as _i4.RemoteConfigValue);
  @override
  _i10.Future<void> setConfigSettings(_i4.RemoteConfigSettings? remoteConfigSettings) =>
      (super.noSuchMethod(Invocation.method(#setConfigSettings, [remoteConfigSettings]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setDefaults(Map<String, dynamic>? defaultParameters) =>
      (super.noSuchMethod(Invocation.method(#setDefaults, [defaultParameters]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]), returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]), returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []), returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []), returnValueForMissingStub: null);
}

/// A class which mocks [UnsplashService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnsplashService extends _i1.Mock implements _i5.UnsplashService {
  MockUnsplashService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i5.Photo> randomPhoto(String? query) => (super.noSuchMethod(Invocation.method(#randomPhoto, [query]),
      returnValue: Future<_i5.Photo>.value(_FakePhoto_5())) as _i10.Future<_i5.Photo>);
  @override
  _i10.Future<List<_i5.Photo>> searchPhotos(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchPhotos, [query]),
          returnValue: Future<List<_i5.Photo>>.value(<_i5.Photo>[])) as _i10.Future<List<_i5.Photo>>);
  @override
  _i10.Future<_i18.Uint8List> downloadPhoto(_i5.Photo? photo) =>
      (super.noSuchMethod(Invocation.method(#downloadPhoto, [photo]),
          returnValue: Future<_i18.Uint8List>.value(_i18.Uint8List(0))) as _i10.Future<_i18.Uint8List>);
}

/// A class which mocks [FLauncherDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFLauncherDatabase extends _i1.Mock implements _i7.FLauncherDatabase {
  MockFLauncherDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get wasCreated => (super.noSuchMethod(Invocation.getter(#wasCreated), returnValue: false) as bool);
  @override
  set wasCreated(bool? _wasCreated) =>
      super.noSuchMethod(Invocation.setter(#wasCreated, _wasCreated), returnValueForMissingStub: null);
  @override
  int get schemaVersion => (super.noSuchMethod(Invocation.getter(#schemaVersion), returnValue: 0) as int);
  @override
  _i6.MigrationStrategy get migration =>
      (super.noSuchMethod(Invocation.getter(#migration), returnValue: _FakeMigrationStrategy_6())
          as _i6.MigrationStrategy);
  @override
  _i7.$AppsTable get apps =>
      (super.noSuchMethod(Invocation.getter(#apps), returnValue: _Fake$AppsTable_7()) as _i7.$AppsTable);
  @override
  _i7.$CategoriesTable get categories =>
      (super.noSuchMethod(Invocation.getter(#categories), returnValue: _Fake$CategoriesTable_8())
          as _i7.$CategoriesTable);
  @override
  _i7.$AppsCategoriesTable get appsCategories =>
      (super.noSuchMethod(Invocation.getter(#appsCategories), returnValue: _Fake$AppsCategoriesTable_9())
          as _i7.$AppsCategoriesTable);
  @override
  Iterable<_i6.TableInfo<_i6.Table, dynamic>> get allTables =>
      (super.noSuchMethod(Invocation.getter(#allTables), returnValue: <_i6.TableInfo<_i6.Table, dynamic>>[])
          as Iterable<_i6.TableInfo<_i6.Table, dynamic>>);
  @override
  List<_i6.DatabaseSchemaEntity> get allSchemaEntities =>
      (super.noSuchMethod(Invocation.getter(#allSchemaEntities), returnValue: <_i6.DatabaseSchemaEntity>[])
          as List<_i6.DatabaseSchemaEntity>);
  @override
  _i6.GeneratedDatabase get attachedDatabase =>
      (super.noSuchMethod(Invocation.getter(#attachedDatabase), returnValue: _FakeGeneratedDatabase_10())
          as _i6.GeneratedDatabase);
  @override
  _i6.StreamQueryUpdateRules get streamUpdateRules =>
      (super.noSuchMethod(Invocation.getter(#streamUpdateRules), returnValue: _FakeStreamQueryUpdateRules_11())
          as _i6.StreamQueryUpdateRules);
  @override
  _i6.DatabaseConnection get connection =>
      (super.noSuchMethod(Invocation.getter(#connection), returnValue: _FakeDatabaseConnection_12())
          as _i6.DatabaseConnection);
  @override
  _i6.SqlTypeSystem get typeSystem =>
      (super.noSuchMethod(Invocation.getter(#typeSystem), returnValue: _FakeSqlTypeSystem_13()) as _i6.SqlTypeSystem);
  @override
  _i6.QueryExecutor get executor =>
      (super.noSuchMethod(Invocation.getter(#executor), returnValue: _FakeQueryExecutor_14()) as _i6.QueryExecutor);
  @override
  _i8.StreamQueryStore get streamQueries =>
      (super.noSuchMethod(Invocation.getter(#streamQueries), returnValue: _FakeStreamQueryStore_15())
          as _i8.StreamQueryStore);
  @override
  _i6.DatabaseConnectionUser get resolvedEngine =>
      (super.noSuchMethod(Invocation.getter(#resolvedEngine), returnValue: _FakeDatabaseConnectionUser_16())
          as _i6.DatabaseConnectionUser);
  @override
  _i10.Future<List<_i7.App>> listApplications() => (super.noSuchMethod(Invocation.method(#listApplications, []),
      returnValue: Future<List<_i7.App>>.value(<_i7.App>[])) as _i10.Future<List<_i7.App>>);
  @override
  _i10.Future<void> persistApps(List<_i7.AppsCompanion>? applications) =>
      (super.noSuchMethod(Invocation.method(#persistApps, [applications]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> updateApp(String? packageName, _i7.AppsCompanion? value) =>
      (super.noSuchMethod(Invocation.method(#updateApp, [packageName, value]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> deleteApps(List<String>? packageNames) =>
      (super.noSuchMethod(Invocation.method(#deleteApps, [packageNames]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> insertCategory(_i7.CategoriesCompanion? category) =>
      (super.noSuchMethod(Invocation.method(#insertCategory, [category]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> deleteCategory(int? id) => (super.noSuchMethod(Invocation.method(#deleteCategory, [id]),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> updateCategories(List<_i7.CategoriesCompanion>? values) =>
      (super.noSuchMethod(Invocation.method(#updateCategories, [values]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> updateCategory(int? id, _i7.CategoriesCompanion? value) =>
      (super.noSuchMethod(Invocation.method(#updateCategory, [id, value]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> deleteAppCategory(int? categoryId, String? packageName) =>
      (super.noSuchMethod(Invocation.method(#deleteAppCategory, [categoryId, packageName]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> insertAppsCategories(List<_i7.AppsCategoriesCompanion>? value) =>
      (super.noSuchMethod(Invocation.method(#insertAppsCategories, [value]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> replaceAppsCategories(List<_i7.AppsCategoriesCompanion>? value) =>
      (super.noSuchMethod(Invocation.method(#replaceAppsCategories, [value]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<List<_i7.CategoryWithApps>> listCategoriesWithVisibleApps() =>
      (super.noSuchMethod(Invocation.method(#listCategoriesWithVisibleApps, []),
              returnValue: Future<List<_i7.CategoryWithApps>>.value(<_i7.CategoryWithApps>[]))
          as _i10.Future<List<_i7.CategoryWithApps>>);
  @override
  _i10.Future<int> nextAppCategoryOrder(int? categoryId) =>
      (super.noSuchMethod(Invocation.method(#nextAppCategoryOrder, [categoryId]), returnValue: Future<int>.value(0))
          as _i10.Future<int>);
  @override
  _i6.Migrator createMigrator() =>
      (super.noSuchMethod(Invocation.method(#createMigrator, []), returnValue: _FakeMigrator_17()) as _i6.Migrator);
  @override
  _i10.Future<void> beforeOpen(_i6.QueryExecutor? executor, _i6.OpeningDetails? details) =>
      (super.noSuchMethod(Invocation.method(#beforeOpen, [executor, details]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Stream<List<Map<String, Object?>>> createStream(_i8.QueryStreamFetcher? stmt) =>
      (super.noSuchMethod(Invocation.method(#createStream, [stmt]),
          returnValue: Stream<List<Map<String, Object?>>>.empty()) as _i10.Stream<List<Map<String, Object?>>>);
  @override
  T alias<T extends _i6.Table, D>(_i6.TableInfo<T, D>? table, String? alias) =>
      throw UnsupportedError('\'alias\' cannot be used without a mockito fallback generator.');
  @override
  void markTablesUpdated(Iterable<_i6.TableInfo<_i6.Table, dynamic>>? tables) =>
      super.noSuchMethod(Invocation.method(#markTablesUpdated, [tables]), returnValueForMissingStub: null);
  @override
  void notifyUpdates(Set<_i6.TableUpdate>? updates) =>
      super.noSuchMethod(Invocation.method(#notifyUpdates, [updates]), returnValueForMissingStub: null);
  @override
  _i10.Stream<Set<_i6.TableUpdate>> tableUpdates([_i6.TableUpdateQuery? query = const _i6.TableUpdateQuery.any()]) =>
      (super.noSuchMethod(Invocation.method(#tableUpdates, [query]), returnValue: Stream<Set<_i6.TableUpdate>>.empty())
          as _i10.Stream<Set<_i6.TableUpdate>>);
  @override
  _i10.Future<T> doWhenOpened<T>(_i10.FutureOr<T> Function(_i6.QueryExecutor)? fn) =>
      (super.noSuchMethod(Invocation.method(#doWhenOpened, [fn]), returnValue: Future<T>.value(null))
          as _i10.Future<T>);
  @override
  _i6.TableOrViewOperations<T, D> from<T extends _i6.HasResultSet, D>(_i6.ResultSetImplementation<T, D>? table) =>
      (super.noSuchMethod(Invocation.method(#from, [table]), returnValue: _FakeTableOrViewOperations_18<T, D>())
          as _i6.TableOrViewOperations<T, D>);
  @override
  _i6.InsertStatement<T, D> into<T extends _i6.Table, D>(_i6.TableInfo<T, D>? table) =>
      (super.noSuchMethod(Invocation.method(#into, [table]), returnValue: _FakeInsertStatement_19<T, D>())
          as _i6.InsertStatement<T, D>);
  @override
  _i6.UpdateStatement<Tbl, R> update<Tbl extends _i6.Table, R>(_i6.TableInfo<Tbl, R>? table) =>
      (super.noSuchMethod(Invocation.method(#update, [table]), returnValue: _FakeUpdateStatement_20<Tbl, R>())
          as _i6.UpdateStatement<Tbl, R>);
  @override
  _i6.SimpleSelectStatement<T, R> select<T extends _i6.HasResultSet, R>(_i6.ResultSetImplementation<T, R>? table,
          {bool? distinct = false}) =>
      (super.noSuchMethod(Invocation.method(#select, [table], {#distinct: distinct}),
          returnValue: _FakeSimpleSelectStatement_21<T, R>()) as _i6.SimpleSelectStatement<T, R>);
  @override
  _i6.JoinedSelectStatement<T, R> selectOnly<T extends _i6.HasResultSet, R>(_i6.ResultSetImplementation<T, R>? table,
          {bool? distinct = false, bool? includeJoinedTableColumns = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #selectOnly, [table], {#distinct: distinct, #includeJoinedTableColumns: includeJoinedTableColumns}),
          returnValue: _FakeJoinedSelectStatement_22<T, R>()) as _i6.JoinedSelectStatement<T, R>);
  @override
  _i6.DeleteStatement<T, D> delete<T extends _i6.Table, D>(_i6.TableInfo<T, D>? table) =>
      (super.noSuchMethod(Invocation.method(#delete, [table]), returnValue: _FakeDeleteStatement_23<T, D>())
          as _i6.DeleteStatement<T, D>);
  @override
  _i10.Future<int> customUpdate(String? query,
          {List<_i6.Variable<dynamic>>? variables = const [],
          Set<_i6.TableInfo<_i6.Table, dynamic>>? updates,
          _i6.UpdateKind? updateKind}) =>
      (super.noSuchMethod(
          Invocation.method(
              #customUpdate, [query], {#variables: variables, #updates: updates, #updateKind: updateKind}),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<int> customInsert(String? query,
          {List<_i6.Variable<dynamic>>? variables = const [], Set<_i6.TableInfo<_i6.Table, dynamic>>? updates}) =>
      (super.noSuchMethod(Invocation.method(#customInsert, [query], {#variables: variables, #updates: updates}),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<List<_i6.QueryRow>> customWriteReturning(String? query,
          {List<_i6.Variable<dynamic>>? variables = const [],
          Set<_i6.TableInfo<_i6.Table, dynamic>>? updates,
          _i6.UpdateKind? updateKind}) =>
      (super.noSuchMethod(
          Invocation.method(
              #customWriteReturning, [query], {#variables: variables, #updates: updates, #updateKind: updateKind}),
          returnValue: Future<List<_i6.QueryRow>>.value(<_i6.QueryRow>[])) as _i10.Future<List<_i6.QueryRow>>);
  @override
  _i6.Selectable<_i6.QueryRow> customSelect(String? query,
          {List<_i6.Variable<dynamic>>? variables = const [],
          Set<_i6.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {}}) =>
      (super.noSuchMethod(Invocation.method(#customSelect, [query], {#variables: variables, #readsFrom: readsFrom}),
          returnValue: _FakeSelectable_24<_i6.QueryRow>()) as _i6.Selectable<_i6.QueryRow>);
  @override
  _i6.Selectable<_i6.QueryRow> customSelectQuery(String? query,
          {List<_i6.Variable<dynamic>>? variables = const [],
          Set<_i6.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {}}) =>
      (super.noSuchMethod(
          Invocation.method(#customSelectQuery, [query], {#variables: variables, #readsFrom: readsFrom}),
          returnValue: _FakeSelectable_24<_i6.QueryRow>()) as _i6.Selectable<_i6.QueryRow>);
  @override
  _i10.Future<void> customStatement(String? statement, [List<dynamic>? args]) =>
      (super.noSuchMethod(Invocation.method(#customStatement, [statement, args]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<T> transaction<T>(_i10.Future<T> Function()? action) =>
      (super.noSuchMethod(Invocation.method(#transaction, [action]), returnValue: Future<T>.value(null))
          as _i10.Future<T>);
  @override
  _i10.Future<void> batch(_i10.FutureOr<void> Function(_i6.Batch)? runInBatch) =>
      (super.noSuchMethod(Invocation.method(#batch, [runInBatch]),
          returnValue: Future<void>.value(), returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i6.GenerationContext $write(_i6.Component? component, {bool? hasMultipleTables, int? startIndex}) =>
      (super.noSuchMethod(
          Invocation.method(#$write, [component], {#hasMultipleTables: hasMultipleTables, #startIndex: startIndex}),
          returnValue: _FakeGenerationContext_25()) as _i6.GenerationContext);
  @override
  _i6.GenerationContext $writeInsertable(_i6.TableInfo<_i6.Table, dynamic>? table, _i6.Insertable<dynamic>? insertable,
          {int? startIndex}) =>
      (super.noSuchMethod(Invocation.method(#$writeInsertable, [table, insertable], {#startIndex: startIndex}),
          returnValue: _FakeGenerationContext_25()) as _i6.GenerationContext);
  @override
  String $expandVar(int? start, int? amount) =>
      (super.noSuchMethod(Invocation.method(#$expandVar, [start, amount]), returnValue: '') as String);
}
